{"version":3,"sources":["../src/routes/getFileRoute.ts"],"names":["mime_types_1","__importDefault","require","fs","__importStar","path_1","errors_1","utils_1","exports","getFileRoute","method","url","schema","querystring","path","type","response","200","properties","result","isFileType","404","code","message","preHandler","request","reply","__awaiter","isPath","query","status","send","InvalidParamsError","handler","readFile","err","fileBuffer","base","default","basename","mimeType","lookup","headers","Content-Type","Content-Disposition"],"mappings":"mqEACA,IAAAA,aAAAC,gBAAAC,QAAA,eAEAC,GAAAC,aAAAF,QAAA,OACAG,OAAAJ,gBAAAC,QAAA,SAEAI,SAAAJ,QAAA,aACAK,QAAAL,QAAA,YASaM,QAAAC,aAA6B,CACxCC,OAAQ,MACRC,IAAK,QACLC,OAAQ,CACNC,YAAa,CACXC,KAAM,CAAEC,KAAM,WAEhBC,SAAU,CACRC,IAAK,CACHF,KAAM,SACNG,WAAY,CACVC,OAAQ,CAAEC,YAAY,KAG1BC,IAAK,CACHN,KAAM,SACNG,WAAY,CACVI,KAAM,CAAEP,KAAM,UACdQ,QAAS,CAAER,KAAM,cAKzBS,WAAY,SAAOC,EAAcC,GAAK,OAAAC,eAAA,OAAA,OAAA,EAAA,W,oCACpC,OAAKpB,QAAAqB,OAAOH,EAAQI,MAAMf,M,IACxB,CAAA,EAAOY,EACJI,OAAO,KACPC,KAAKzB,SAAA0B,mBAAmB,CAAEH,MAAOJ,EAAQI,MAAMf,cAGtDmB,QAAS,SAAOR,EAAcC,GAAK,OAAAC,eAAA,OAAA,OAAA,EAAA,W,oCACjC,IAKExB,GAAG+B,SAAST,EAAQI,MAAMf,KAAM,SAACqB,EAAKC,GACpC,IAAMC,EAAOhC,OAAAiC,QAAKC,SAASd,EAAQI,MAAMf,MACnC0B,EAAWxC,aAAAsC,QAAKG,OAAOJ,GAC7BX,EACGgB,QAAQ,CACPC,eAAgBH,EAChBI,sBAAuB,yBAAyBP,EAAI,MAErDN,KAAKI,GAAOC,KAejB,MAAOD,GACP,MAAA,CAAA,EAAOT,EAAMI,OAAO,KAAKC,KAAKI,I","file":"getFileRoute.js","sourcesContent":["import { RouteOptions, FastifyRequest } from \"fastify\";\nimport mime from \"mime-types\";\nimport { RouteGenericInterface } from \"fastify/types/route\";\nimport * as fs from \"fs\";\nimport path from \"path\";\nimport { IncomingMessage, Server } from \"http\";\nimport { InvalidParamsError } from \"../errors\";\nimport { isPath } from \"../utils\";\n\ninterface Req\n  extends FastifyRequest<RouteGenericInterface, Server, IncomingMessage> {\n  query: {\n    path: string;\n  };\n}\n\nexport const getFileRoute: RouteOptions = {\n  method: \"GET\",\n  url: \"/file\",\n  schema: {\n    querystring: {\n      path: { type: \"string\" },\n    },\n    response: {\n      200: {\n        type: \"object\",\n        properties: {\n          result: { isFileType: true },\n        },\n      },\n      404: {\n        type: \"object\",\n        properties: {\n          code: { type: \"string\" },\n          message: { type: \"string\" },\n        },\n      },\n    },\n  },\n  preHandler: async (request: Req, reply) => {\n    if (!isPath(request.query.path)) {\n      return reply\n        .status(404)\n        .send(InvalidParamsError({ query: request.query.path }));\n    }\n  },\n  handler: async (request: Req, reply) => {\n    try {\n      // const result = fs.createReadStream(request.query.path, {\n      //   encoding: \"utf8\",\n      // });\n\n      fs.readFile(request.query.path, (err, fileBuffer) => {\n        const base = path.basename(request.query.path);\n        const mimeType = mime.lookup(base);\n        reply\n          .headers({\n            \"Content-Type\": mimeType,\n            \"Content-Disposition\": `attachment; filename=\"${base}\"`,\n          })\n          .send(err || fileBuffer);\n      });\n\n      // const base = path.basename(request.query.path);\n\n      // const parse = path.parse(base);\n\n      // const mimeType = mime.lookup(base);\n\n      // return reply\n      //   .headers({\n      //     \"Content-Type\": mimeType,\n      //     \"Content-Disposition\": `attachment; filename=\"${parse.name}${parse.ext}\"`,\n      //   })\n      //   .send(result);\n    } catch (err) {\n      return reply.status(404).send(err);\n    }\n  },\n};\n"]}