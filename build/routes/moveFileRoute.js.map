{"version":3,"sources":["../src/routes/moveFileRoute.ts"],"names":["fs_1","__importDefault","require","errors_1","exports","moveFileRoute","method","url","schema","body","source","type","dest","response","200","properties","result","404","code","message","preHandler","request","reply","__awaiter","__generator","this","_a","handler","_b","status","send","InvalidParamsError","toLowerCase","default","accessSync","src","createReadStream","dt","createWriteStream","pipe","on","err","name","unlinkSync","e"],"mappings":"qkDAEA,IAAAA,KAAAC,gBAAAC,QAAA,OAEAC,SAAAD,QAAA,aAUaE,QAAAC,cAA8B,CACzCC,OAAQ,OACRC,IAAK,aACLC,OAAQ,CACNC,KAAM,CACJC,OAAQ,CAAEC,KAAM,UAChBC,KAAM,CAAED,KAAM,WAEhBE,SAAU,CACRC,IAAK,CACHH,KAAM,SACNI,WAAY,CACVC,OAAQ,CAAEL,KAAM,aAGpBM,IAAK,CACHN,KAAM,SACNI,WAAY,CACVG,KAAM,CAAEP,KAAM,UACdQ,QAAS,CAAER,KAAM,cAKzBS,WAAY,SAAOC,EAAcC,GAAK,OAAAC,eAAA,OAAA,OAAA,EAAA,WAAA,OAAAC,YAAAC,KAAA,SAAAC,G,eACtCC,QAAS,SAAOD,EAAiCJ,G,IAA/BM,EAAAF,EAAAjB,KAAQC,EAAMkB,EAAAlB,OAAEE,EAAIgB,EAAAhB,K,6FACpC,GAAsB,iBAAXF,GAAuC,iBAATE,EACvC,MAAA,CAAA,EAAOU,EAAMO,OAAO,KAAKC,KAAK3B,SAAA4B,mBAAmB,CAAErB,OAAMA,EAAEE,KAAIA,MAGjE,GAAIF,EAAOsB,gBAAkBpB,EAAKoB,cAChC,MAAA,CAAA,EAAOV,EAAMO,OAAO,KAAKC,KAAK3B,SAAA4B,mBAAmB,CAAErB,OAAMA,EAAEE,KAAIA,MAGjE,IAuBE,OAtBAZ,KAAAiC,QAAGC,WAAWxB,GAERyB,EAAMnC,KAAAiC,QAAGG,iBAAiB1B,GAC1B2B,EAAKrC,KAAAiC,QAAGK,kBAAkB1B,GAEhCuB,EAAII,KAAKF,GAETF,EAAIK,GAAG,QAAS,SAACC,GACfnB,EAAMO,OAAO,KAAKC,KAAK,CACrBZ,KAAMuB,EAAIC,KACVvB,QAASsB,EAAItB,YAIjBgB,EAAIK,GAAG,MAAO,WACZlB,EAAMO,OAAO,KAAKC,KAAK,CAAEd,QAAQ,MAGnCmB,EAAIK,GAAG,QAAS,WACdxC,KAAAiC,QAAGU,WAAWjC,KAGhB,CAAA,EAAOY,EAAMO,OAAO,KAAKC,KAAK,CAAEd,QAAQ,KACxC,MAAO4B,GACP,MAAA,CAAA,EAAOtB,EAAMO,OAAO,KAAKC,KAAKc,I","file":"moveFileRoute.js","sourcesContent":["import { RouteOptions, FastifyRequest } from \"fastify\";\nimport { RouteGenericInterface } from \"fastify/types/route\";\nimport fs from \"fs\";\nimport { IncomingMessage, Server } from \"http\";\nimport { InvalidParamsError } from \"../errors\";\n\ninterface Req\n  extends FastifyRequest<RouteGenericInterface, Server, IncomingMessage> {\n  body: {\n    source: string;\n    dest: string;\n  };\n}\n\nexport const moveFileRoute: RouteOptions = {\n  method: \"POST\",\n  url: \"/file/move\",\n  schema: {\n    body: {\n      source: { type: \"string\" },\n      dest: { type: \"string\" },\n    },\n    response: {\n      200: {\n        type: \"object\",\n        properties: {\n          result: { type: \"boolean\" },\n        },\n      },\n      404: {\n        type: \"object\",\n        properties: {\n          code: { type: \"string\" },\n          message: { type: \"string\" },\n        },\n      },\n    },\n  },\n  preHandler: async (request: Req, reply) => {},\n  handler: async ({ body: { source, dest } }: Req, reply) => {\n    if (typeof source !== \"string\" || typeof dest !== \"string\") {\n      return reply.status(404).send(InvalidParamsError({ source, dest }));\n    }\n\n    if (source.toLowerCase() === dest.toLowerCase()) {\n      return reply.status(404).send(InvalidParamsError({ source, dest }));\n    }\n\n    try {\n      fs.accessSync(source);\n\n      const src = fs.createReadStream(source);\n      const dt = fs.createWriteStream(dest);\n\n      src.pipe(dt);\n\n      src.on(\"error\", (err) => {\n        reply.status(404).send({\n          code: err.name,\n          message: err.message,\n        });\n      });\n\n      src.on(\"end\", () => {\n        reply.status(200).send({ result: true });\n      });\n\n      src.on(\"close\", () => {\n        fs.unlinkSync(source);\n      });\n\n      return reply.status(200).send({ result: true });\n    } catch (e) {\n      return reply.status(404).send(e);\n    }\n  },\n};\n"]}