{"version":3,"sources":["../src/routes/pages/folderPageRoute.ts"],"names":["fs_1","__importDefault","require","errors_1","utils_1","exports","folderPageRoute","method","url","schema","querystring","path","type","response","200","properties","result","404","code","message","preHandler","request","reply","__awaiter","isPath","query","status","send","InvalidParamsError","JSON","stringify","handler","dirs","default","readdirSync","withFileTypes","map","dir","name","isDirectory","isFile","replace","view","prev","substr","lastIndexOf","err","callNotFound"],"mappings":"ukDAEA,IAAAA,KAAAC,gBAAAC,QAAA,OAEAC,SAAAD,QAAA,gBACAE,QAAAF,QAAA,eASaG,QAAAC,gBAAgC,CAC3CC,OAAQ,MACRC,IAAK,UACLC,OAAQ,CACNC,YAAa,CACXC,KAAM,CAAEC,KAAM,WAEhBC,SAAU,CACRC,IAAK,CACHF,KAAM,SACNG,WAAY,CACVC,OAAQ,CAAEJ,KAAM,WAGpBK,IAAK,CACHL,KAAM,SACNG,WAAY,CACVG,KAAM,CAAEN,KAAM,UACdO,QAAS,CAAEP,KAAM,cAKzBQ,WAAY,SAAOC,EAAcC,GAAK,OAAAC,eAAA,OAAA,OAAA,EAAA,W,oCACpC,OAAKnB,QAAAoB,OAAOH,EAAQI,MAAMd,M,IACxB,CAAA,EAAOW,EACJI,OAAO,KACPC,KACCxB,SAAAyB,mBAAmBC,KAAKC,UAAU,CAAEL,MAAOJ,EAAQI,MAAMd,eAIjEoB,QAAS,SAAOV,EAAcC,GAAK,OAAAC,eAAA,OAAA,OAAA,EAAA,W,8CAC3BZ,EAA8B,KAAvBU,EAAQI,MAAMd,KAAc,IAAMU,EAAQI,MAAMd,KAC7D,IAcE,OAbMqB,EAAOhC,KAAAiC,QAAGC,YAAYvB,EAAM,CAChCwB,eAAe,IAGXnB,EAASgB,EAAKI,IAAI,SAACC,GAAQ,MAAA,CAC/BC,KAAMD,EAAIC,KACVC,YAAaF,EAAIE,cACjBC,OAAQH,EAAIG,SACZ7B,KAAM0B,EAAIG,SACNnB,EAAQb,IAAIiC,QAAQ,SAAU,QAAU,IAAMJ,EAAIC,KAClDjB,EAAQb,IAAM,IAAM6B,EAAIC,QAG9B,CAAA,EAAOhB,EAAMoB,KAAK,aAAc,CAC9BV,KAAMhB,EACNL,KAAMU,EAAQb,IACdmC,KAAM,CACJhC,KAAMU,EAAQb,IAAIoC,OAAO,EAAGvB,EAAQb,IAAIqC,YAAY,UAGxD,MAAOC,GACP,MAAA,CAAA,EAAOxB,EAAMI,OAAO,KAAKqB,gB","file":"folderPageRoute.js","sourcesContent":["import { RouteOptions, FastifyRequest } from \"fastify\";\nimport { RouteGenericInterface } from \"fastify/types/route\";\nimport fs from \"fs\";\nimport { IncomingMessage, Server } from \"http\";\nimport { InvalidParamsError } from \"../../errors\";\nimport { isPath } from \"../../utils\";\n\ninterface Req\n  extends FastifyRequest<RouteGenericInterface, Server, IncomingMessage> {\n  query: {\n    path: string;\n  };\n}\n\nexport const folderPageRoute: RouteOptions = {\n  method: \"GET\",\n  url: \"/folder\",\n  schema: {\n    querystring: {\n      path: { type: \"string\" },\n    },\n    response: {\n      200: {\n        type: \"object\",\n        properties: {\n          result: { type: \"array\" },\n        },\n      },\n      404: {\n        type: \"object\",\n        properties: {\n          code: { type: \"string\" },\n          message: { type: \"string\" },\n        },\n      },\n    },\n  },\n  preHandler: async (request: Req, reply) => {\n    if (!isPath(request.query.path)) {\n      return reply\n        .status(404)\n        .send(\n          InvalidParamsError(JSON.stringify({ query: request.query.path }))\n        );\n    }\n  },\n  handler: async (request: Req, reply) => {\n    const path = request.query.path === \"\" ? \"/\" : request.query.path;\n    try {\n      const dirs = fs.readdirSync(path, {\n        withFileTypes: true,\n      });\n\n      const result = dirs.map((dir) => ({\n        name: dir.name,\n        isDirectory: dir.isDirectory(),\n        isFile: dir.isFile(),\n        path: dir.isFile()\n          ? request.url.replace(\"folder\", \"file\") + \"/\" + dir.name\n          : request.url + \"/\" + dir.name,\n      }));\n\n      return reply.view(\"folder.pug\", {\n        dirs: result,\n        path: request.url,\n        prev: {\n          path: request.url.substr(0, request.url.lastIndexOf(\"/\")),\n        },\n      });\n    } catch (err) {\n      return reply.status(404).callNotFound();\n    }\n  },\n};\n"]}